CREATE DATABASE jumagim2023asistencias_clientes;
USE jumagim2023;

CREATE TABLE IF NOT EXISTS personas (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
dni INT UNSIGNED NOT NULL UNIQUE,
nombre VARCHAR (100) NOT NULL,
apellido VARCHAR (100) NOT NULL,
email VARCHAR (200) NOT NULL UNIQUE,
fecha_nac VARCHAR (10),
telefono VARCHAR (20),
PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS ciudades (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tipos_padecimientos (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
padecimiento VARCHAR (100) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS medicos (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
apellido VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tipos_rutinas (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
tipo VARCHAR (100) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS bloques (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
tipo VARCHAR (100) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS meses (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
mes VARCHAR (50) NOT NULL,
abreviado VARCHAR (100) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tipos_personal (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tipos_planes (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS tipos_egresos (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS turnos (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (50) NOT NULL,
PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS barrios (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (100) NOT NULL,
ciudad_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (ciudad_id) REFERENCES ciudades(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS direcciones (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (100) NOT NULL,
numero TINYINT,
barrio_id INT UNSIGNED NOT NULL,
personas_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (barrio_id) REFERENCES barrios(id),
FOREIGN KEY (personas_id) REFERENCES personas(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS detalle_rutinas (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
descripcion VARCHAR (100) NOT NULL,
nombre VARCHAR (100) NOT NULL,
tipo_rutina_id INT UNSIGNED NOT NULL,
bloque_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (tipo_rutina_id) REFERENCES tipos_rutinas(id),
FOREIGN KEY (bloque_id) REFERENCES bloques(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS rutinas (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
nombre VARCHAR (100) NOT NULL,
detalle_rutina_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (detalle_rutina_id) REFERENCES detalle_rutinas(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS clientes (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
persona_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (persona_id) REFERENCES personas(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS personal (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
persona_id INT UNSIGNED NOT NULL,
tipo_personal_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (persona_id) REFERENCES personas(id),
FOREIGN KEY (tipo_personal_id) REFERENCES tipos_personal(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS asistencias_docentes (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
fecha VARCHAR (10),
personal_id INT UNSIGNED NOT NULL,
turno_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (personal_id) REFERENCES personal(id),
FOREIGN KEY (turno_id) REFERENCES turnos(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS asistencias_clientes (
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
cliente_id INT UNSIGNED NOT NULL,
turno_id INT UNSIGNED NOT NULL,
PRIMARY KEY (id),
FOREIGN KEY (cliente_id) REFERENCES clientes(id),
FOREIGN KEY (turno_id) REFERENCES turnos(id)
ON DELETE CASCADE
ON UPDATE CASCADE
);